# -*- coding: utf-8 -*-
"""LogicalErrorDitection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15qCjQzEY4dEbMJ3rXxSGFHl1FQbjVCuX
"""



!pip install pandas scikit-learn joblib

import pandas as pd

# Load dataset
dataset_path = "logical_errors_dataset.json"  # Make sure the filename matches exactly
data = pd.read_json(dataset_path)

# Preview the first few rows of the dataset
print(data.head())

# Check the dataset's structure and column information
print(data.info())

from sklearn.model_selection import train_test_split

# Define inputs (X) and targets (y)
X = data['code_snippet']
y = data['error_type']

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print("Training samples:", len(X_train))
print("Testing samples:", len(X_test))

from sklearn.feature_extraction.text import TfidfVectorizer

# Create a TF-IDF vectorizer
vectorizer = TfidfVectorizer(max_features=5000)

# Fit the vectorizer on the training data and transform the inputs
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

print("Shape of TF-IDF features (training data):", X_train_tfidf.shape)

from sklearn.ensemble import RandomForestClassifier

# Initialize the Random Forest classifier
classifier = RandomForestClassifier()

# Train the classifier on the training data
classifier.fit(X_train_tfidf, y_train)

print("Model training complete!")

from sklearn.metrics import classification_report, accuracy_score

# Make predictions on the test set
y_pred = classifier.predict(X_test_tfidf)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

# Load the saved model and vectorizer
classifier = joblib.load("logical_error_classifier.pkl")
vectorizer = joblib.load("tfidf_vectorizer.pkl")

# Test with a new code snippet
new_snippet = """while True:
    print('Infinite Loop Test')"""
new_snippet_tfidf = vectorizer.transform([new_snippet])
predicted_error = classifier.predict(new_snippet_tfidf)

print("Predicted Error Type:", predicted_error[0])

import joblib

# Load the saved model and vectorizer
classifier = joblib.load("logical_error_classifier.pkl")
vectorizer = joblib.load("tfidf_vectorizer.pkl")

# Test with a new code snippet
new_snippet = """while True:
    print('Infinite Loop Test')"""
new_snippet_tfidf = vectorizer.transform([new_snippet])
predicted_error = classifier.predict(new_snippet_tfidf)

print("Predicted Error Type:", predicted_error[0])

!pip install joblib

import joblib

# Load the saved model and vectorizer
classifier = joblib.load("logical_error_classifier.pkl")
vectorizer = joblib.load("tfidf_vectorizer.pkl")

# Test with a new code snippet
new_snippet = """while True:
    print('Infinite Loop Test')"""
new_snippet_tfidf = vectorizer.transform([new_snippet])
predicted_error = classifier.predict(new_snippet_tfidf)

print("Predicted Error Type:", predicted_error[0])



# For machine learning and evaluation
import joblib
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Load the saved model and vectorizer
classifier = joblib.load("logical_error_classifier.pkl")
vectorizer = joblib.load("tfidf_vectorizer.pkl")

# Transform the test set into TF-IDF features
X_test_tfidf = vectorizer.transform(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)

# Print the accuracy
print("Accuracy of the model: {:.2f}%".format(accuracy * 100))

import joblib

# Load the saved model and vectorizer
classifier = joblib.load("logical_error_classifier.pkl")
vectorizer = joblib.load("tfidf_vectorizer.pkl")

# Test with a new code snippet
new_snippet = """while True:
    print('Infinite Loop Test')"""
new_snippet_tfidf = vectorizer.transform([new_snippet])
predicted_error = classifier.predict(new_snippet_tfidf)

print("Predicted Error Type:", predicted_error[0])

# New test code snippets (with logical errors)
new_code_snippets = [
    "if value = 10: print('Value is 10')",  # Incorrect Comparison (assignment instead of equality check)
    "while True: print('Infinite loop!')",  # Infinite Loop
    "def print_length(s): print(len(s))",   # Missing Null Check
    "counter = 0\nwhile counter < 5: print('Counter:', counter)",  # Correct logic, for comparison
    "if age > 18 and age < 60: print('Eligible')"  # Correct logic for eligibility
]

import joblib

# Load the saved model and vectorizer
classifier = joblib.load("logical_error_classifier.pkl")
vectorizer = joblib.load("tfidf_vectorizer.pkl")

# New test code snippets (with logical errors)
new_code_snippets = [
    "if value = 10: print('Value is 10')",  # Incorrect Comparison (assignment instead of equality check)
    "while True: print('Infinite loop!')",  # Infinite Loop
    "def print_length(s): print(len(s))",   # Missing Null Check
    "counter = 0\nwhile counter < 5: print('Counter:', counter)",  # Correct logic, for comparison
    "if age > 18 and age < 60: print('Eligible')"  # Correct logic for eligibility
]

# Transform the new code snippets using the same vectorizer
new_code_snippets_tfidf = vectorizer.transform(new_code_snippets)

# Predict error types for the new code snippets
new_predictions = classifier.predict(new_code_snippets_tfidf)

# Print the new code snippets with their predicted error types
for snippet, prediction in zip(new_code_snippets, new_predictions):
    print(f"Code Snippet: {snippet}")
    print(f"Predicted Error Type: {prediction}")
    print("-" * 40)